#########################################################################
# gyro-testing
# 6dec2023 - late night
# this code demonstrates the turns WITH the gyro -- not so great
#########################################################################
import app
from hub import port, light_matrix, power_off
from hub import light_matrix
import runloop
import motor_pair, motor
import sys
from hub import motion_sensor #gyro sensor
import time

#this is the circumference of the wheels that are used
#it is a global variable
circumference = 27.6
motor_pair.pair(motor_pair.PAIR_1,port.A,port.E)
motion_sensor.set_yaw_face(motion_sensor.FRONT)

#########################################################################
# stopped_turn
# this function turns the robot a number of degrees
# positive numbers are right, negative are left
# does NOT use the gyro
# unlike the gyro, this is accurate
#########################################################################
async def stopped_turn(angle):
    angle = int(angle * 2 * 0.82) #times two because each motor turning in opposit directions does half -- and a fudge factor
    motor_pair.unpair(motor_pair.PAIR_1)
    motor_pair.pair(motor_pair.PAIR_1, port.A, port.E)
    await motor_pair.move_tank_for_degrees(motor_pair.PAIR_1, angle, 150, -150, stop=motor.SMART_BRAKE)



#########################################################################
# stopped_turn_gyro(angle)
#turns anumber of degrees, uses gyro
#########################################################################
async def stopped_turn_gyro(angle):
    motion_sensor.set_yaw_face(motion_sensor.FRONT)
    motion_sensor.reset_yaw(0)
    #wait for motion sensor - from lego examples
    if (motion_sensor.stable() != True):
        print("waiting for gyro")
        time.sleep_ms(100)
    #while True:
    #    print(motion_sensor.tilt_angles()[0])
    #    time.sleep_ms(1000)
    time.sleep_ms(500) #wait for gyro to reset
    if angle > 0: #positive - right turn, negative gyro, positive motor
        motor_turn = 100 #api says this is maximum turn
        gyro_goal = int(angle * -10)
        while motion_sensor.tilt_angles()[0] >= gyro_goal: #get yaw value
            motor_pair.move(motor_pair.PAIR_1,motor_turn, velocity=900)
        motor_pair.stop(motor_pair.PAIR_1, stop=motor.SMART_BRAKE)
        print(motion_sensor.tilt_angles()[0])
    else: #negative - left turn, positive gyro, negative motor
        motor_turn = -100
        gyro_goal = int(angle * -10)
        last_angle = motion_sensor.tilt_angles()[0]
        print("start angle: " + str(motion_sensor.tilt_angles()[0]/10))
        while motion_sensor.tilt_angles()[0] <= gyro_goal: #get yaw value from tuple
            current_angle = motion_sensor.tilt_angles()[0]
            time.sleep_ms(100)
            if (current_angle == -1):
                print("ERROR! - gyro value -1")
            #values should go up
            if (current_angle < last_angle):
                print("ERROR! angle went backwards! ", end='')
                print("previous: " + str(last_angle/10) + " current: " + str(current_angle/10))
            if (current_angle == 1800):
                print("ERROR! - gyro angle 180")
            last_angle = current_angle
            motor_pair.move(motor_pair.PAIR_1,motor_turn, velocity=100)
        motor_pair.stop(motor_pair.PAIR_1, stop=motor.SMART_BRAKE)
        print("end angle: " + str(motion_sensor.tilt_angles()[0]/10))


#########################################################################
#this is the 'main' program -- this is where everything starts :D :< :> :) :( D: :/ :\ :| :{ :} :[ :] :P :7 :O
#########################################################################
async def main():

    
    #test the gyro while turning
    turn_count = 1
    while (turn_count <= 8):
        print("try: " + str(turn_count))
        await stopped_turn_gyro(-90)
        turn_count = turn_count + 1
        time.sleep_ms(1000)
        print("-----")
    time.sleep_ms(1000)


    sys.exit(0)
runloop.run(main())
